Parameters:
    EnvironmentName:
        Description: This name will be prefixed to all the resources
        Type: String
    ServerAMIId:
        Description: AMI ID for EC2 instances
        Type: String

    InstanceType:
        Description: EC2 instance type
        Type: String
    
Resources:
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our load balancer
            VpcId: 
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
    

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our host and SSH from local only
            VpcId: 
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
    S3BucketsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                Effect: Allow
                Principal:
                  Service: ec2.amazonaws.com
                Action: 'sts:AssumeRole'
            Path: "/"
    
    S3BucketReadOnlyAccess:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: S3BucketPolicy
            PolicyDocument: 
                Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "*"
            Roles: 
              - Ref: S3BucketsRole
    
    S3BucketInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: "/"
          Roles: 
            - Ref: S3BucketsRole
    
    WebbAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue: 
                    !Sub "${EnvironmentName}-VPCID"
    
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service 
                    cd/var/www.html
                    aws s3 cp s3://solution2idris/index.html

            ImageId: !Ref ServerAMIId
            IamInstanceProfile: !Ref S3BucketInstanceProfile
            SecurityGroups:
                - Ref: WebServerSecurityGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PRIVATE-SUBNETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "4"
            MaxSize: "6"
            TargetGroupARNs:
                - Ref: WebbAppTargetGroup
        
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets: 
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-public-subnet1"
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-public-subnet2"
            SecurityGroups: 
                - Ref: LBSecurityGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref WebbAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: 80
            Protocol: HTTP


    LBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref WebbAppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1
Outputs:
    WebAppLBDNSName:
        Description: DNS name of the load balancer
        Value: !Join  ["",["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName

    
        
    
